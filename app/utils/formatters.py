"""
–£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
import pytz

from app.models.calendar import CalendarEvent, EventType, EventStatus
from app.schemas.calendar import EventSuggestion


def format_event(event: CalendarEvent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text = f"üéØ <b>{event.title}</b>\n"
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        text += f"üìÖ –î–∞—Ç–∞: {event.start_time.strftime('%d.%m.%Y')}\n"
        text += f"üïê –í—Ä–µ–º—è: {event.start_time.strftime('%H:%M')} - {event.end_time.strftime('%H:%M')}\n"
        text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event.duration_minutes} –º–∏–Ω\n"
        
        # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        type_icon = get_event_type_icon(event.event_type)
        text += f"{type_icon} –¢–∏–ø: {EventType(event.event_type).value.title()}\n"
        
        # –°—Ç–∞—Ç—É—Å
        status_icon = get_status_icon(event.status)
        text += f"{status_icon} –°—Ç–∞—Ç—É—Å: {EventStatus(event.status).value.title()}\n"
        
        # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        if event.location:
            text += f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        if event.client_name:
            text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {event.client_name}\n"
        
        if event.client_phone:
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {event.client_phone}\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if event.description:
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        
        # –ó–∞–º–µ—Ç–∫–∏
        if event.notes:
            text += f"üìã –ó–∞–º–µ—Ç–∫–∏: {event.notes}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if event.is_today:
            text += "üìå <b>–°–µ–≥–æ–¥–Ω—è!</b>\n"
        
        if event.is_overdue:
            text += "‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!</b>\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}"


def format_events_list(events: List[CalendarEvent], title: str = "–°–æ–±—ã—Ç–∏—è") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    try:
        if not events:
            return f"üìÖ <b>{title}</b>\n\n‚úÖ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        text = f"üìÖ <b>{title}</b>\n\n"
        
        for i, event in enumerate(events, 1):
            text += f"{i}. <b>{event.title}</b>\n"
            text += f"   üïê {event.start_time.strftime('%H:%M')} - {event.end_time.strftime('%H:%M')}\n"
            
            if event.location:
                text += f"   üìç {event.location}\n"
            
            if event.client_name:
                text += f"   üë§ {event.client_name}\n"
            
            # –°—Ç–∞—Ç—É—Å
            status_icon = get_status_icon(event.status)
            text += f"   {status_icon} {EventStatus(event.status).value.title()}\n"
            
            text += "\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}"


def format_time_slot(suggestion: EventSuggestion, index: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    try:
        start_time = suggestion.start_time.strftime("%H:%M")
        end_time = suggestion.end_time.strftime("%H:%M")
        confidence = suggestion.confidence
        
        text = f"{index}. <b>{start_time} - {end_time}</b>\n"
        text += f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%}\n"
        text += f"   üí° {suggestion.reason}\n\n"
        
        return text
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞: {e}"


def format_calendar_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}\n"
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_events']}\n"
        text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['cancelled_events']}\n"
        text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {stats['upcoming_events']}\n"
        text += f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['average_duration']:.0f} –º–∏–Ω\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        text += "üìÖ <b>–ü–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π:</b>\n"
        for event_type, count in stats['events_by_type'].items():
            if count > 0:
                icon = get_event_type_icon(event_type)
                text += f"{icon} {event_type.title()}: {count}\n"
        
        # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Å—ã
        if stats.get('busy_hours'):
            text += "\nüïê <b>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Å—ã:</b>\n"
            busy_hours = sorted(stats['busy_hours'].items(), key=lambda x: x[1], reverse=True)
            for hour, count in busy_hours[:5]:  # –¢–æ–ø-5 —á–∞—Å–æ–≤
                text += f"   {hour:02d}:00 - {count} —Å–æ–±—ã—Ç–∏–π\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"


def format_daily_schedule(events: List[CalendarEvent]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if not events:
            return "‚úÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        morning_events = []
        afternoon_events = []
        evening_events = []
        
        for event in events:
            hour = event.start_time.hour
            if 6 <= hour < 12:
                morning_events.append(event)
            elif 12 <= hour < 18:
                afternoon_events.append(event)
            else:
                evening_events.append(event)
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if morning_events:
            text += "üåÖ <b>–£—Ç—Ä–æ:</b>\n"
            for event in morning_events:
                text += format_schedule_event(event)
            text += "\n"
        
        # –î–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if afternoon_events:
            text += "‚òÄÔ∏è <b>–î–µ–Ω—å:</b>\n"
            for event in afternoon_events:
                text += format_schedule_event(event)
            text += "\n"
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if evening_events:
            text += "üåÜ <b>–í–µ—á–µ—Ä:</b>\n"
            for event in evening_events:
                text += format_schedule_event(event)
            text += "\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"


def format_schedule_event(event: CalendarEvent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        text = f"   üïê <b>{event.start_time.strftime('%H:%M')} - {event.end_time.strftime('%H:%M')}</b>\n"
        text += f"   üéØ {event.title}\n"
        
        if event.location:
            text += f"   üìç {event.location}\n"
        
        if event.client_name:
            text += f"   üë§ {event.client_name}\n"
        
        text += "\n"
        return text
        
    except Exception as e:
        return f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}\n"


def format_weekly_summary(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    try:
        text = "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}\n"
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_events']}\n"
        text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['cancelled_events']}\n"
        text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {stats['upcoming_events']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        text += "üìÖ <b>–ü–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π:</b>\n"
        for event_type, count in stats['events_by_type'].items():
            if count > 0:
                icon = get_event_type_icon(event_type)
                text += f"{icon} {event_type.title()}: {count}\n"
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if stats.get('average_duration', 0) > 0:
            text += f"\n‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['average_duration']:.0f} –º–∏–Ω"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}"


def format_property_info(property_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    try:
        text = "üè† <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if property_data.get('type'):
            text += f"üìã –¢–∏–ø: {property_data['type']}\n"
        
        if property_data.get('address'):
            text += f"üìç –ê–¥—Ä–µ—Å: {property_data['address']}\n"
        
        if property_data.get('price'):
            text += f"üí∞ –¶–µ–Ω–∞: {property_data['price']}\n"
        
        if property_data.get('area'):
            text += f"üìê –ü–ª–æ—â–∞–¥—å: {property_data['area']}\n"
        
        if property_data.get('rooms'):
            text += f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç: {property_data['rooms']}\n"
        
        if property_data.get('floor'):
            text += f"üè¢ –≠—Ç–∞–∂: {property_data['floor']}\n"
        
        if property_data.get('description'):
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {property_data['description']}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if property_data.get('features'):
            text += f"\n‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            for feature in property_data['features']:
                text += f"   ‚Ä¢ {feature}\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {e}"


def format_ai_response(response: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI"""
    try:
        text = "ü§ñ <b>–û—Ç–≤–µ—Ç AI</b>\n\n"
        
        if response.get('confidence'):
            confidence = response['confidence']
            if confidence >= 0.8:
                text += f"üéØ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.0%})\n\n"
            elif confidence >= 0.6:
                text += f"‚úÖ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.0%})\n\n"
            else:
                text += f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.0%})\n\n"
        
        if response.get('extracted_data'):
            text += "üìã <b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            for key, value in response['extracted_data'].items():
                if value:
                    text += f"   ‚Ä¢ {key}: {value}\n"
            text += "\n"
        
        if response.get('answer'):
            text += f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{response['answer']}\n\n"
        
        if response.get('suggestions'):
            text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for suggestion in response['suggestions']:
                text += f"   ‚Ä¢ {suggestion}\n"
        
        return text.strip()
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI: {e}"


def format_error_message(error: str, context: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    try:
        text = "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
        
        if context:
            text += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
        
        text += f"–û—à–∏–±–∫–∞: {error}\n\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        return text
        
    except Exception as e:
        return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"


def format_success_message(message: str, details: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    try:
        text = "‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
        text += f"{message}\n"
        
        if details:
            text += f"\n{details}"
        
        return text
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"


def get_event_type_icon(event_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    icons = {
        "meeting": "ü§ù",
        "showing": "üè†",
        "call": "üìû",
        "consultation": "üíº",
        "contract": "üìã",
        "other": "üìù"
    }
    return icons.get(event_type, "üìù")


def get_status_icon(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è"""
    icons = {
        "scheduled": "üìÖ",
        "in_progress": "üîÑ",
        "completed": "‚úÖ",
        "cancelled": "‚ùå",
        "rescheduled": "üîÑ"
    }
    return icons.get(status, "üìù")


def format_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        if minutes < 60:
            return f"{minutes} –º–∏–Ω"
        elif minutes == 60:
            return "1 —á–∞—Å"
        else:
            hours = minutes // 60
            remaining_minutes = minutes % 60
            if remaining_minutes == 0:
                return f"{hours} —á"
            else:
                return f"{hours}—á {remaining_minutes}–º"
        
    except Exception as e:
        return f"{minutes} –º–∏–Ω"


def format_relative_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        diff = dt - now
        
        if diff.total_seconds() < 0:
            return "–ø—Ä–æ—à–ª–æ"
        
        days = diff.days
        hours = diff.seconds // 3600
        minutes = (diff.seconds % 3600) // 60
        
        if days > 0:
            return f"—á–µ—Ä–µ–∑ {days} –¥–Ω"
        elif hours > 0:
            return f"—á–µ—Ä–µ–∑ {hours}—á"
        elif minutes > 0:
            return f"—á–µ—Ä–µ–∑ {minutes}–º"
        else:
            return "—Å–µ–π—á–∞—Å"
        
    except Exception as e:
        return dt.strftime("%H:%M") 