import logging
import asyncio
from typing import Dict, Any, Optional
from pathlib import Path

from celery import shared_task

logger = logging.getLogger(__name__)

@shared_task(bind=True, name="process_voice_message")
def process_voice_message(self, file_path: str, user_id: int, chat_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ
    """
    async def _process():
        try:
            from app.ai.speech.whisper_client import WhisperClient
            from app.bot.handlers.text import EventManager
            from app.database import get_async_session
            from aiogram import Bot
            from app.config import settings
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            whisper = WhisperClient()
            transcription = await whisper.transcribe_file(file_path)
            
            if not transcription or not transcription.get('text'):
                raise ValueError("Failed to transcribe audio")
            
            text = transcription['text']
            confidence = transcription.get('confidence', 0.8)
            
            # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            event_manager = EventManager()
            async for session in get_async_session():
                result = await event_manager.process_text(text, user_id, session)
                break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            message = f"üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</b>\n\n"
            message += f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{text}\n\n"
            message += f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {int(confidence * 100)}%\n\n"
            
            if result['type'] == 'created':
                message += result['message']
            else:
                message += f"‚ùå {result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ')}"
            
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="HTML"
            )
            await bot.session.close()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(file_path).unlink(missing_ok=True)
            except Exception as e:
                logger.warning(f"Failed to delete temp file {file_path}: {e}")
            
            logger.info(f"Voice message processed for user {user_id}")
            return {"status": "success", "text": text, "event_created": result['type'] == 'created'}
            
        except Exception as e:
            logger.error(f"Voice processing error: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            try:
                from aiogram import Bot
                from app.config import settings
                
                bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
                await bot.session.close()
            except Exception:
                pass
            
            raise self.retry(countdown=60, max_retries=2)
    
    return asyncio.run(_process())

@shared_task(bind=True, name="process_image_ocr")
def process_image_ocr(self, image_path: str, user_id: int, chat_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å OCR
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ
    """
    async def _process():
        try:
            from app.ai.vision.ocr_client import OCRClient
            from app.bot.handlers.text import EventManager
            from app.database import get_async_session
            from aiogram import Bot
            from app.config import settings
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ocr = OCRClient()
            extracted_text = await ocr.extract_text(image_path)
            
            if not extracted_text:
                raise ValueError("No text found in image")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            event_manager = EventManager()
            async for session in get_async_session():
                result = await event_manager.process_text(extracted_text, user_id, session)
                break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
            
            message = f"üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</b>\n\n"
            message += f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{extracted_text}\n\n"
            
            if result['type'] == 'created':
                message += result['message']
            else:
                message += f"‚ùå {result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞')}"
            
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="HTML"
            )
            await bot.session.close()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(image_path).unlink(missing_ok=True)
            except Exception as e:
                logger.warning(f"Failed to delete temp image {image_path}: {e}")
            
            logger.info(f"Image OCR processed for user {user_id}")
            return {"status": "success", "text": extracted_text, "event_created": result['type'] == 'created'}
            
        except Exception as e:
            logger.error(f"Image OCR error: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            try:
                from aiogram import Bot
                from app.config import settings
                
                bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ."
                )
                await bot.session.close()
            except Exception:
                pass
            
            raise self.retry(countdown=60, max_retries=2)
    
    return asyncio.run(_process())

@shared_task(name="analyze_user_patterns")
def analyze_user_patterns(user_id: int):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    async def _analyze():
        try:
            from app.ai.embeddings.vector_service import VectorSearchService
            from app.database import get_async_session
            from sqlalchemy import select
            from app.models.user import User
            
            vector_service = VectorSearchService()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–±—ã—Ç–∏–π
            patterns = await vector_service.analyze_event_patterns(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async for session in get_async_session():
                result = await session.execute(select(User).where(User.id == user_id))
                user = result.scalar_one_or_none()
                
                if user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.preferences = patterns
                    await session.commit()
                
                break
            
            logger.info(f"User patterns analyzed for user {user_id}")
            return patterns
            
        except Exception as e:
            logger.error(f"Pattern analysis error: {e}")
            return {}
    
    return asyncio.run(_analyze())

@shared_task(name="smart_event_suggestions")
def smart_event_suggestions(user_id: int, text: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    async def _suggest():
        try:
            from app.ai.embeddings.vector_service import VectorSearchService
            
            vector_service = VectorSearchService()
            suggestions = await vector_service.suggest_related_events(text, user_id)
            
            logger.info(f"Generated {len(suggestions)} suggestions for user {user_id}")
            return suggestions
            
        except Exception as e:
            logger.error(f"Suggestions generation error: {e}")
            return []
    
    return asyncio.run(_suggest())

@shared_task(name="semantic_search_events")
def semantic_search_events(user_id: int, query: str, limit: int = 5):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–±—ã—Ç–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async def _search():
        try:
            from app.ai.embeddings.vector_service import VectorSearchService
            
            vector_service = VectorSearchService()
            results = await vector_service.search_similar_events(
                query=query,
                user_id=user_id,
                limit=limit
            )
            
            logger.info(f"Semantic search returned {len(results)} results for user {user_id}")
            return results
            
        except Exception as e:
            logger.error(f"Semantic search error: {e}")
            return []
    
    return asyncio.run(_search()) 