from datetime import datetime, timedelta
from typing import Optional, List
from calendar import monthrange

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_quick_actions_keyboard():
    """–û—Å–Ω–æ–≤–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    builder.button(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="show_calendar")
    builder.button(text="üìã –°–æ–±—ã—Ç–∏—è", callback_data="my_events")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event")
    
    # Mini App –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    builder.button(
        text="üóìÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", 
        web_app=WebAppInfo(url="http://127.0.0.1:8000/api/v1/miniapp/")
    )
    
    builder.adjust(2, 1, 1)  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - 2 –∫–Ω–æ–ø–∫–∏, –≤—Ç–æ—Ä–æ–π - 1, —Ç—Ä–µ—Ç–∏–π - 1
    return builder.as_markup()

def get_calendar_keyboard():
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞—Ç
    builder.button(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="date_today")
    builder.button(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="date_tomorrow")
    
    builder.button(text="üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="date_monday")
    builder.button(text="üìÖ –í—Ç–æ—Ä–Ω–∏–∫", callback_data="date_tuesday")
    
    builder.button(text="üìÖ –°—Ä–µ–¥–∞", callback_data="date_wednesday") 
    builder.button(text="üìÖ –ß–µ—Ç–≤–µ—Ä–≥", callback_data="date_thursday")
    
    builder.button(text="üìÖ –ü—è—Ç–Ω–∏—Ü–∞", callback_data="date_friday")
    builder.button(text="üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ", callback_data="date_weekend")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    
    builder.adjust(2, 2, 2, 2, 1)  # 2-2-2-2-1
    return builder.as_markup()

def get_time_keyboard():
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    times = [
        ("9:00", "time_0900"),
        ("10:00", "time_1000"),
        ("11:00", "time_1100"),
        ("12:00", "time_1200"),
        ("13:00", "time_1300"),
        ("14:00", "time_1400"),
        ("15:00", "time_1500"),
        ("16:00", "time_1600"),
        ("17:00", "time_1700"),
        ("18:00", "time_1800"),
        ("19:00", "time_1900"),
        ("20:00", "time_2000"),
    ]
    
    for time_text, callback in times:
        builder.button(text=time_text, callback_data=callback)
    
    # –°–≤–æ–µ –≤—Ä–µ–º—è
    builder.button(text="‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom")
    
    # –ù–∞–∑–∞–¥
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_calendar")
    
    builder.adjust(3, 3, 3, 3, 1, 1)  # 3-3-3-3-1-1
    return builder.as_markup()

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.button(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="menu_calendar")
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="menu_create_event")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    builder.button(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="menu_clients")
    builder.button(text="üè† –û–±—ä–µ–∫—Ç—ã", callback_data="menu_properties")
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    builder.button(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="menu_analytics")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
    
    # –ü–æ–º–æ—â—å
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
    
    builder.adjust(2, 2, 2, 1)  # 2-2-2-1
    return builder.as_markup()

def get_event_types_keyboard():
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="ü§ù –í—Å—Ç—Ä–µ—á–∞", callback_data="type_meeting")
    builder.button(text="üè† –ü–æ–∫–∞–∑", callback_data="type_showing")
    
    builder.button(text="üìû –ó–≤–æ–Ω–æ–∫", callback_data="type_call")
    builder.button(text="üìù –ó–∞–¥–∞—á–∞", callback_data="type_task")
    
    builder.button(text="üí∞ –°–¥–µ–ª–∫–∞", callback_data="type_deal")
    builder.button(text="üìã –î—Ä—É–≥–æ–µ", callback_data="type_other")
    
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="create_event")
    
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö)
def get_event_actions_keyboard(event_id: int, action: str):
    """–î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–±—ã—Ç–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    
    if action == "delete":
        builder.button(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_id}")
        builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="my_events")
    elif action == "created":
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"event_edit_{event_id}")
        builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"event_delete_{event_id}")
        builder.button(text="üìÖ –ö –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="show_calendar")
    
    builder.adjust(1)
    return builder.as_markup()

def get_my_events_keyboard(events):
    """–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
    return get_quick_actions_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è 