"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
"""
import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, Mock
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.bot.handlers.text import handle_text_message


class TestTextHandlerCases:
    """–¢–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @pytest.mark.asyncio
    async def test_event_creation_cases(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        
        # –ú–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        mock_message = Mock()
        mock_message.from_user.id = 123456789
        mock_message.text = "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
        
        mock_bot = AsyncMock()
        mock_session = AsyncMock()
        
        # –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_user = Mock()
        mock_user.id = 1
        mock_session.execute.return_value.scalar_one_or_none.return_value = mock_user
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        test_cases = [
            # –ë–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            "–ó–≤–æ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è –≤ 17:30",
            "–ü–æ–∫–∞–∑ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00",
            
            # –° –æ–ø–∏—Å–∞–Ω–∏–µ–º
            "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ò–≤–∞–Ω–æ–≤—ã–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            "–ó–≤–æ–Ω–æ–∫ –ø–æ –ø–æ–≤–æ–¥—É –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–µ–≥–æ–¥–Ω—è –≤ 17:30",
            "–ü–æ–∫–∞–∑ –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            
            # –ò–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            "–ü–æ—Å—Ç–∞–≤—å –∑–≤–æ–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 17:30",
            "–î–æ–±–∞–≤—å –ø–æ–∫–∞–∑ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00",
            
            # –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å
            "–£ –º–µ–Ω—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç—Ä–∏ —á–∞—Å–∞ –¥–Ω—è",
            "–ù—É–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
            "–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º",
            
            # –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "–≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ 15-00",
            "–∑–≤–æ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è 17.30",
            "–ø–æ–∫–∞–∑ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 2 —á–∞—Å–∞",
        ]
        
        for case in test_cases:
            mock_message.text = case
            try:
                await handle_text_message(mock_message, mock_bot, mock_session)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç
                assert mock_bot.send_message.called
                mock_bot.send_message.reset_mock()
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{case}': {e}")
    
    @pytest.mark.asyncio
    async def test_non_event_messages(self):
        """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
        
        mock_message = Mock()
        mock_message.from_user.id = 123456789
        mock_bot = AsyncMock()
        mock_session = AsyncMock()
        
        non_event_cases = [
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–ü—Ä–∏–≤–µ—Ç!",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å",
            
            # –í–æ–ø—Ä–æ—Å—ã
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞?",
            "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ñ–∏—Å?",
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            "–°–ø–∞—Å–∏–±–æ",
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–º–æ—â—å",
            "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!",
            
            # –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã
            "–ü–æ–Ω—è—Ç–Ω–æ",
            "–•–æ—Ä–æ—à–æ",
            "–õ–∞–¥–Ω–æ",
            "–û–∫–µ–π",
        ]
        
        for case in non_event_cases:
            mock_message.text = case
            try:
                await handle_text_message(mock_message, mock_bot, mock_session)
                # –î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GPT –æ—Ç–≤–µ—Ç
                assert mock_bot.send_message.called
                mock_bot.send_message.reset_mock()
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{case}': {e}")
    
    @pytest.mark.asyncio
    async def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        
        mock_message = Mock()
        mock_message.from_user.id = 123456789
        mock_bot = AsyncMock()
        mock_session = AsyncMock()
        
        edge_cases = [
            # –ü—É—Å—Ç—ã–µ –∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            "",
            "   ",
            "\n\n\n",
            ".",
            "???",
            "!!!",
            
            # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
            "15:00",
            "–≤ 3 —á–∞—Å–∞",
            "17-30",
            
            # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
            "–∑–∞–≤—Ç—Ä–∞",
            "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "—Å–µ–≥–æ–¥–Ω—è",
            
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            "–≤—Å—Ç—Ä–µ—á–∞ –≤ 25:99",
            "–∑–≤–æ–Ω–æ–∫ –≤ 30:00",
            
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
            "–≤—Å—Ç—Ä–µ—á–∞ 32 —Ñ–µ–≤—Ä–∞–ª—è",
            "–∑–≤–æ–Ω–æ–∫ –≤ –ø—è—Ç–Ω–∏—Ü—É 13-–≥–æ",
            
            # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–í—Å—Ç—Ä–µ—á–∞ " + "–æ—á–µ–Ω—å " * 50 + "–≤–∞–∂–Ω–∞—è –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "–í—Å—Ç—Ä–µ—á–∞ @#$%^&*() –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            "–ó–≤–æ–Ω–æ–∫ üìû —Å–µ–≥–æ–¥–Ω—è –≤ 17:30",
            "–ü–æ–∫–∞–∑ üè† –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            
            # –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
            "Meeting –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
            "–í—Å—Ç—Ä–µ—á–∞ tomorrow at 3pm",
        ]
        
        for case in edge_cases:
            mock_message.text = case
            try:
                await handle_text_message(mock_message, mock_bot, mock_session)
                # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
                assert True
            except Exception as e:
                pytest.fail(f"–ü–∞–¥–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞–Ω–∏—á–Ω–æ–º —Å–ª—É—á–∞–µ '{case}': {e}")
