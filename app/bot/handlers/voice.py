"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–¢–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ + —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
"""
import logging
import tempfile
import os
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message

from app.database import get_async_session
from app.services.ai_service import AIService

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.voice)
async def handle_voice_message(message: Message):
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    try:
        async for session in get_async_session():
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_msg = await message.answer(
                "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
                "üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...",
                parse_mode="HTML"
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            voice = message.voice
            file_info = await message.bot.get_file(voice.file_id)
            
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                await message.bot.download_file(file_info.file_path, temp_file.name)
                temp_file_path = temp_file.name
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await status_msg.edit_text(
                    "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å...</b>\n\n"
                    "‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                    "üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...",
                    parse_mode="HTML"
                )

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
                ai_service = AIService()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
                result = await ai_service.process_voice(temp_file_path)
                
                if "error" in result:
                    await status_msg.edit_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å: {result['error']}\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫–æ",
                        parse_mode="HTML"
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                transcribed_text = result.get("transcribed_text", "")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await status_msg.edit_text(
                    "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å...</b>\n\n"
                    "‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                    "‚úÖ –†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n"
                    "ü§ñ –°–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ...",
                    parse_mode="HTML"
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</b>\n\n"
                
                if transcribed_text:
                    response_text += f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n<i>¬´{transcribed_text}¬ª</i>\n\n"
                    
                    # üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–Ø –ò–ó –†–ï–ß–ò
                    try:
                        from app.bot.handlers.text import EventManager
                        event_manager = EventManager()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                        from sqlalchemy import select
                        from app.models.user import User
                        result_user = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
                        db_user = result_user.scalar_one_or_none()
                        
                        if db_user:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏
                            event_result = await event_manager.process_text(transcribed_text, message.from_user.id, session)
                            
                            if event_result['type'] == 'created':
                                response_text += "üéâ <b>–°–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                                response_text += event_result['message']
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å–æ–±—ã—Ç–∏—è
                                await status_msg.edit_text(
                                    response_text,
                                    parse_mode="HTML",
                                    reply_markup=event_result.get('keyboard')
                                )
                                return
                            elif event_result['type'] == 'response':
                                response_text += f"ü§ñ <b>GPT –æ—Ç–≤–µ—Ç:</b>\n{event_result['message']}\n\n"
                            else:
                                response_text += "ü§î <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</b>\n\n"
                                response_text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:\n"
                                response_text += "‚Ä¢ ¬´–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00¬ª\n"
                                response_text += "‚Ä¢ ¬´–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É —Å–µ–≥–æ–¥–Ω—è –≤ 17:30¬ª\n\n"
                        
                    except Exception as e:
                        logger.warning(f"Failed to auto-create event from voice: {e}")
                        response_text += "‚ö†Ô∏è <b>–°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ</b>\n\n"
                
                else:
                    response_text += "üìù <b>–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞</b>\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫–æ\n\n"

                await status_msg.edit_text(response_text, parse_mode="HTML")

            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_file_path)
                except:
                    pass
            
            break

    except Exception as e:
        logger.error(f"Voice processing error: {e}")
        try:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                parse_mode="HTML"
            )
        except:
            pass

def register_handlers(dp: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 