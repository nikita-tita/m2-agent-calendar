"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
–¢–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–º–æ—â—å
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.database import get_async_session

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å"""
    help_text = (
        "ü§ñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:</b>\n"
        "‚Ä¢ ¬´–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00¬ª\n"
        "‚Ä¢ ¬´–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É —Å–µ–≥–æ–¥–Ω—è –≤ 17:30¬ª\n"
        "‚Ä¢ ¬´–ü–æ–∫–∞–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫¬ª\n\n"
        "<b>üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ\n\n"
        "<b>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b>\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
        "<b>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö–∞–ª–µ–Ω–¥–∞—Ä—å¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    )
    
    from app.bot.keyboards.inline import get_calendar_keyboard
    await callback.message.edit_text(
        help_text,
        reply_markup=get_calendar_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "help_examples")
async def help_examples_callback(callback: CallbackQuery):
    """–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥"""
    examples_text = (
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π</b>\n\n"
        "<b>–ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\n"
        "‚Ä¢ –ó–≤–æ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è –≤ 17:30\n"
        "‚Ä¢ –ü–æ–∫–∞–∑ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
        "<b>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ò–≤–∞–Ω–æ–≤—ã–º –∑–∞–≤—Ç—Ä–∞ –≤ 14:00\n"
        "‚Ä¢ –ó–≤–æ–Ω–æ–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç—É —Å–µ–≥–æ–¥–Ω—è –≤ 16:00\n"
        "‚Ä¢ –ü–æ–∫–∞–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 15:30\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:</b>\n"
        "‚Ä¢ –£–¥–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É\n"
        "‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏ –∑–≤–æ–Ω–æ–∫\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏ –º–æ–∏ —Å–æ–±—ã—Ç–∏—è"
    )
    
    from app.bot.keyboards.inline import get_calendar_keyboard
    await callback.message.edit_text(
        examples_text,
        reply_markup=get_calendar_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("event_"))
async def event_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    action = callback.data
    
    if action.startswith("event_delete_"):
        event_id = int(action.split("_")[-1])
        
        from app.bot.keyboards.inline import get_event_actions_keyboard
        await callback.message.edit_text(
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ #{event_id}?",
            reply_markup=get_event_actions_keyboard(event_id, "delete"),
            parse_mode="HTML"
        )
        
    elif action.startswith("event_confirm_delete_"):
        event_id = int(action.split("_")[-1])
        
        try:
            async for session in get_async_session():
                from sqlalchemy import select
                from app.models.event import Event
                
                result = await session.execute(select(Event).where(Event.id == event_id))
                event = result.scalar_one_or_none()
                
                if event:
                    await session.delete(event)
                    await session.commit()
                    
                    await callback.message.edit_text(
                        "‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                        parse_mode="HTML"
                    )
                else:
                    await callback.message.edit_text(
                        "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        parse_mode="HTML"
                    )
                break
                
        except Exception as e:
            logger.error(f"Error deleting event: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è",
                parse_mode="HTML"
            )
    
    elif action == "event_cancel_delete":
        await callback.message.edit_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "create_event")
async def create_event_callback(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    await callback.message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ ¬´–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00¬ª\n"
        "‚Ä¢ ¬´–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É —Å–µ–≥–æ–¥–Ω—è –≤ 17:30¬ª",
        parse_mode="HTML"
    )
    await callback.answer()

def register_handlers(dp: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 