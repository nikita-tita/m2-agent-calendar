"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.calendar_service import CalendarService, EventValidationError, CalendarConflictError
from app.models.calendar import EventType, EventStatus
from app.models.user import User
from app.keyboards.calendar import (
    get_calendar_main_keyboard,
    get_event_type_keyboard,
    get_event_actions_keyboard,
    get_calendar_navigation_keyboard,
    get_time_slots_keyboard
)
from app.utils.formatters import format_event, format_events_list, format_time_slot
from app.database import get_db

logger = logging.getLogger(__name__)
router = Router()


class CreateEventStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    waiting_for_type = State()
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_duration = State()
    waiting_for_location = State()
    waiting_for_client_name = State()
    waiting_for_client_phone = State()
    waiting_for_description = State()
    waiting_for_confirmation = State()


class EditEventStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    waiting_for_field = State()
    waiting_for_new_value = State()


@router.message(Command("calendar"))
async def calendar_main(message: Message, fsm_context: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        await fsm_context.clear()
        
        keyboard = get_calendar_main_keyboard()
        
        await message.answer(
            "üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("today"))
async def show_today_events(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        async with get_db() as db:
            calendar_service = CalendarService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db.get(User, message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            events = await calendar_service.get_today_events(user.id)
            
            if not events:
                await message.answer(
                    "‚úÖ <b>–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</b>\n\n"
                    "–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /create_event",
                    parse_mode="HTML"
                )
            else:
                events_text = format_events_list(events, "–°–µ–≥–æ–¥–Ω—è")
                await message.answer(events_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")


@router.message(Command("upcoming"))
async def show_upcoming_events(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        async with get_db() as db:
            calendar_service = CalendarService(db)
            
            user = await db.get(User, message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            events = await calendar_service.get_upcoming_events(user.id, days=7)
            
            if not events:
                await message.answer(
                    "‚úÖ <b>–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</b>\n\n"
                    "–ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /create_event",
                    parse_mode="HTML"
                )
            else:
                events_text = format_events_list(events, "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
                await message.answer(events_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")


@router.message(Command("create_event"))
async def start_create_event(message: Message, fsm_context: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        await fsm_context.clear()
        await fsm_context.set_state(CreateEventStates.waiting_for_type)
        
        keyboard = get_event_type_keyboard()
        
        await message.answer(
            "üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("event_type_"))
async def handle_event_type_selection(callback: CallbackQuery, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_type = callback.data.replace("event_type_", "")
        
        await fsm_context.update_data(event_type=event_type)
        await fsm_context.set_state(CreateEventStates.waiting_for_title)
        
        await callback.message.edit_text(
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            f"–¢–∏–ø: {EventType(event_type).value}\n"
            f"–ü—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –õ–µ–Ω–∏–Ω–∞, 15",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_title)
async def handle_event_title(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        title = message.text.strip()
        if len(title) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        await fsm_context.update_data(title=title)
        await fsm_context.set_state(CreateEventStates.waiting_for_date)
        
        await message.answer(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: 25.12.2024",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_date)
async def handle_event_date(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    try:
        date_str = message.text.strip()
        
        try:
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date < datetime.now().date():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        
        await fsm_context.update_data(date=date)
        await fsm_context.set_state(CreateEventStates.waiting_for_time)
        
        await message.answer(
            "üïê <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</b>\n\n"
            f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 14:30",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_time)
async def handle_event_time(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    try:
        time_str = message.text.strip()
        
        try:
            time = datetime.strptime(time_str, "%H:%M").time()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
            return
        
        data = await fsm_context.get_data()
        date = data['date']
        start_time = datetime.combine(date, time)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if start_time < datetime.now():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        
        await fsm_context.update_data(start_time=start_time)
        await fsm_context.set_state(CreateEventStates.waiting_for_duration)
        
        await message.answer(
            "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö</b>\n\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M')}\n"
            "–ü—Ä–∏–º–µ—Ä: 60 (–¥–ª—è 1 —á–∞—Å–∞)",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_duration)
async def handle_event_duration(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
    try:
        try:
            duration = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            return
        
        if duration < 15 or duration > 480:  # –û—Ç 15 –º–∏–Ω—É—Ç –¥–æ 8 —á–∞—Å–æ–≤
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 8 —á–∞—Å–æ–≤.")
            return
        
        data = await fsm_context.get_data()
        start_time = data['start_time']
        end_time = start_time + timedelta(minutes=duration)
        
        await fsm_context.update_data(duration=duration, end_time=end_time)
        await fsm_context.set_state(CreateEventStates.waiting_for_location)
        
        await message.answer(
            "üìç <b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</b>\n\n"
            f"–í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n"
            "–ü—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –∫–≤. 45\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_location)
async def handle_event_location(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        location = message.text.strip() if message.text != "/skip" else None
        
        await fsm_context.update_data(location=location)
        await fsm_context.set_state(CreateEventStates.waiting_for_client_name)
        
        await message.answer(
            "üë§ <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            f"–ú–µ—Å—Ç–æ: {location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_client_name)
async def handle_client_name(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client_name = message.text.strip() if message.text != "/skip" else None
        
        await fsm_context.update_data(client_name=client_name)
        await fsm_context.set_state(CreateEventStates.waiting_for_client_phone)
        
        await message.answer(
            "üìû <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_client_phone)
async def handle_client_phone(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client_phone = message.text.strip() if message.text != "/skip" else None
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if client_phone and not (client_phone.startswith('+7') and len(client_phone) == 12):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX")
            return
        
        await fsm_context.update_data(client_phone=client_phone)
        await fsm_context.set_state(CreateEventStates.waiting_for_description)
        
        await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            "–ü—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∑ –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(CreateEventStates.waiting_for_description)
async def handle_event_description(message: Message, fsm_context: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        description = message.text.strip() if message.text != "/skip" else None
        
        await fsm_context.update_data(description=description)
        await fsm_context.set_state(CreateEventStates.waiting_for_confirmation)
        
        # –ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await fsm_context.get_data()
        summary = _format_event_summary(data)
        
        keyboard = get_event_actions_keyboard()
        
        await message.answer(
            f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n{summary}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "confirm_event")
async def confirm_event_creation(callback: CallbackQuery, fsm_context: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        data = await fsm_context.get_data()
        
        async with get_db() as db:
            calendar_service = CalendarService(db)
            
            user = await db.get(User, callback.from_user.id)
            if not user:
                await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event = await calendar_service.create_event(
                user_id=user.id,
                event_type=EventType(data['event_type']),
                title=data['title'],
                description=data.get('description'),
                start_time=data['start_time'],
                end_time=data['end_time'],
                location=data.get('location'),
                client_name=data.get('client_name'),
                client_phone=data.get('client_phone')
            )
            
            await fsm_context.clear()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            event_text = format_event(event)
            
            await callback.message.edit_text(
                f"‚úÖ <b>–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n{event_text}",
                parse_mode="HTML"
            )
        
    except EventValidationError as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except CalendarConflictError as e:
        await callback.message.edit_text(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")


@router.callback_query(F.data == "cancel_event")
async def cancel_event_creation(callback: CallbackQuery, fsm_context: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        await fsm_context.clear()
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")


@router.message(Command("suggest_time"))
async def suggest_meeting_time(message: Message):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –§–æ—Ä–º–∞—Ç: /suggest_time 60 25.12.2024 26.12.2024
        parts = message.text.split()
        if len(parts) < 4:
            await message.answer(
                "üìÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /suggest_time <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–º–∏–Ω> <–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞> <–¥–∞—Ç–∞_–æ–∫–æ–Ω—á–∞–Ω–∏—è>\n"
                "–ü—Ä–∏–º–µ—Ä: /suggest_time 60 25.12.2024 26.12.2024",
                parse_mode="HTML"
            )
            return
        
        try:
            duration = int(parts[1])
            start_date = datetime.strptime(parts[2], "%d.%m.%Y").date()
            end_date = datetime.strptime(parts[3], "%d.%m.%Y").date()
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
            return
        
        async with get_db() as db:
            calendar_service = CalendarService(db)
            
            user = await db.get(User, message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            start_datetime = datetime.combine(start_date, datetime.min.time())
            end_datetime = datetime.combine(end_date, datetime.max.time())
            
            suggestions = await calendar_service.suggest_meeting_times(
                user_id=user.id,
                duration_minutes=duration,
                start_date=start_datetime,
                end_date=end_datetime
            )
            
            if not suggestions:
                await message.answer("‚ùå –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            suggestions_text = "üïê <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n"
            for i, suggestion in enumerate(suggestions[:5], 1):
                suggestions_text += format_time_slot(suggestion, i)
            
            keyboard = get_time_slots_keyboard(suggestions[:5])
            
            await message.answer(
                suggestions_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")


@router.message(Command("stats"))
async def show_calendar_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        async with get_db() as db:
            calendar_service = CalendarService(db)
            
            user = await db.get(User, message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            stats = await calendar_service.get_calendar_stats(user.id, days=30)
            
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∑–∞ 30 –¥–Ω–µ–π):</b>\n\n"
            stats_text += f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}\n"
            stats_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed_events']}\n"
            stats_text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['cancelled_events']}\n"
            stats_text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {stats['upcoming_events']}\n"
            stats_text += f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['average_duration']:.0f} –º–∏–Ω\n\n"
            
            stats_text += "üìÖ <b>–ü–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π:</b>\n"
            for event_type, count in stats['events_by_type'].items():
                if count > 0:
                    icon = _get_event_type_icon(event_type)
                    stats_text += f"{icon} {event_type.title()}: {count}\n"
            
            await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


def _format_event_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    summary = f"üéØ <b>{data['title']}</b>\n"
    summary += f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
    summary += f"üïê –í—Ä–µ–º—è: {data['start_time'].strftime('%H:%M')} - {data['end_time'].strftime('%H:%M')}\n"
    summary += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω\n"
    
    if data.get('location'):
        summary += f"üìç –ú–µ—Å—Ç–æ: {data['location']}\n"
    
    if data.get('client_name'):
        summary += f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
    
    if data.get('client_phone'):
        summary += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['client_phone']}\n"
    
    if data.get('description'):
        summary += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    
    return summary


def _get_event_type_icon(event_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    icons = {
        "meeting": "ü§ù",
        "showing": "üè†",
        "call": "üìû",
        "consultation": "üíº",
        "contract": "üìã",
        "other": "üìù"
    }
    return icons.get(event_type, "üìù") 