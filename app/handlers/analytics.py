"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
"""
import logging
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.analytics_service import AnalyticsService, ReportType
from app.keyboards.analytics import (
    get_analytics_main_keyboard,
    get_report_type_keyboard,
    get_export_format_keyboard,
    get_period_keyboard,
    get_metrics_keyboard
)
from app.utils.formatters import format_metric, format_chart_data
from app.database import get_async_session
from app.models.user import User

logger = logging.getLogger(__name__)
router = Router()


class AnalyticsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    waiting_for_report_type = State()
    waiting_for_period = State()
    waiting_for_export_format = State()


@router.message(Command("analytics"))
async def analytics_main(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        await message.answer(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
            reply_markup=get_analytics_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_main: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@router.callback_query(F.data == "analytics_dashboard")
async def show_dashboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    try:
        await callback.answer()
        
        async with get_async_session() as session:
            analytics_service = AnalyticsService(session)
            dashboard_data = await analytics_service.get_user_dashboard(callback.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_text = "üìà <b>–í–∞—à –¥–∞—à–±–æ—Ä–¥</b>\n\n"
        
        for metric in dashboard_data["metrics"]:
            trend_emoji = "üìà" if metric.trend == "up" else "üìâ" if metric.trend == "down" else "‚û°Ô∏è"
            change_text = ""
            if metric.change is not None:
                change_text = f" ({metric.change:+.1f})"
            metrics_text += f"{trend_emoji} <b>{metric.name}:</b> {metric.value} {metric.unit}{change_text}\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if dashboard_data["recent_events"]:
            metrics_text += "\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n"
            for event in dashboard_data["recent_events"][:3]:
                metrics_text += f"‚Ä¢ {event['title']} - {event['start_time']}\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if dashboard_data["active_properties"]:
            metrics_text += "\nüè† <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:</b>\n"
            for prop in dashboard_data["active_properties"][:3]:
                metrics_text += f"‚Ä¢ {prop['title']} - {prop['price']}\n"
        
        await callback.message.edit_text(
            metrics_text,
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_dashboard: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_performance")
async def show_performance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        await callback.answer()
        
        async with get_async_session() as session:
            analytics_service = AnalyticsService(session)
            performance_data = await analytics_service.get_performance_metrics(callback.from_user.id)
        
        text = "‚ö° <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {performance_data['period_days']} –¥–Ω–µ–π\n\n"
        
        text += f"üìä <b>–°–æ–±—ã—Ç–∏—è:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {performance_data['total_events']} —à—Ç\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {performance_data['completed_events']} —à—Ç\n"
        text += f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: {performance_data['cancelled_events']} —à—Ç\n"
        text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {performance_data['conversion_rate']}%\n\n"
        
        text += f"üè† <b>–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {performance_data['total_properties']} —à—Ç\n"
        text += f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {performance_data['sold_properties']} —à—Ç\n"
        text += f"‚Ä¢ –°–¥–∞–Ω–æ –≤ –∞—Ä–µ–Ω–¥—É: {performance_data['rented_properties']} —à—Ç\n\n"
        
        text += f"‚è±Ô∏è <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è: {performance_data['avg_event_duration']} –º–∏–Ω\n"
        
        # –°–∞–º—ã–µ –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã
        if performance_data['busy_hours']:
            busy_hours = sorted(performance_data['busy_hours'].items(), key=lambda x: x[1], reverse=True)[:3]
            text += f"‚Ä¢ –°–∞–º—ã–µ –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã: {', '.join([f'{hour}:00' for hour, _ in busy_hours])}\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_performance: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_financial")
async def show_financial(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    try:
        await callback.answer()
        
        async with get_async_session() as session:
            analytics_service = AnalyticsService(session)
            financial_data = await analytics_service.get_financial_metrics(callback.from_user.id)
        
        text = "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</b>\n\n"
        text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {financial_data['period_days']} –¥–Ω–µ–π\n\n"
        
        text += f"üíµ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {financial_data['total_value']:,.0f} ‚ÇΩ\n"
        text += f"üìä <b>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {financial_data['avg_value']:,.0f} ‚ÇΩ\n\n"
        
        text += f"üè† <b>–ü–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫:</b>\n"
        text += f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞: {financial_data['sale_value']:,.0f} ‚ÇΩ\n"
        text += f"‚Ä¢ –ê—Ä–µ–Ω–¥–∞: {financial_data['rent_value']:,.0f} ‚ÇΩ\n\n"
        
        text += f"üèòÔ∏è <b>–ü–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b>\n"
        text += f"‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã: {financial_data['apartment_value']:,.0f} ‚ÇΩ\n"
        text += f"‚Ä¢ –î–æ–º–∞: {financial_data['house_value']:,.0f} ‚ÇΩ\n"
        text += f"‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è: {financial_data['commercial_value']:,.0f} ‚ÇΩ\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_financial: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_clients")
async def show_clients(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        await callback.answer()
        
        async with get_async_session() as session:
            analytics_service = AnalyticsService(session)
            clients_data = await analytics_service.get_client_analytics(callback.from_user.id)
        
        text = "üë• <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        text += f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {clients_data['period_days']} –¥–Ω–µ–π\n\n"
        
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n"
        text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {clients_data['unique_clients']} —á–µ–ª\n"
        text += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö: {clients_data['repeat_clients']} —á–µ–ª\n"
        text += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: {clients_data['repeat_rate']}%\n\n"
        
        # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
        if clients_data['top_clients']:
            text += f"üèÜ <b>–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
            for i, client in enumerate(clients_data['top_clients'][:5], 1):
                text += f"{i}. {client['client_name']} - {client['event_count']} —Å–æ–±—ã—Ç–∏–π ({client['conversion_rate']}%)\n"
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
        if clients_data['client_geography']:
            text += f"\nüåç <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n"
            for geo in clients_data['client_geography'][:3]:
                text += f"‚Ä¢ {geo['city']}: {geo['client_count']} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_clients: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_reports")
async def reports_menu(callback: CallbackQuery, fsm_context: FSMContext):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        await callback.answer()
        await fsm_context.set_state(AnalyticsStates.waiting_for_report_type)
        
        await callback.message.edit_text(
            "üìã <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_report_type_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reports_menu: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data.startswith("report_type_"))
async def select_report_type(callback: CallbackQuery, fsm_context: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    try:
        await callback.answer()
        
        report_type_str = callback.data.replace("report_type_", "")
        report_type = ReportType(report_type_str)
        
        await fsm_context.update_data(report_type=report_type_str)
        
        if report_type == ReportType.CUSTOM:
            await fsm_context.set_state(AnalyticsStates.waiting_for_period)
            await callback.message.edit_text(
                "üìÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=get_period_keyboard()
            )
        else:
            await fsm_context.set_state(AnalyticsStates.waiting_for_export_format)
            await callback.message.edit_text(
                f"üìÑ <b>–û—Ç—á–µ—Ç: {report_type.value.title()}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                reply_markup=get_export_format_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_report_type: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data.startswith("period_"))
async def select_period(callback: CallbackQuery, fsm_context: FSMContext):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        await callback.answer()
        
        period_days = int(callback.data.replace("period_", ""))
        await fsm_context.update_data(period_days=period_days)
        await fsm_context.set_state(AnalyticsStates.waiting_for_export_format)
        
        await callback.message.edit_text(
            f"üìÑ <b>–û—Ç—á–µ—Ç –∑–∞ {period_days} –¥–Ω–µ–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=get_export_format_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_period: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data.startswith("export_"))
async def export_report(callback: CallbackQuery, fsm_context: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
    try:
        await callback.answer()
        
        export_format = callback.data.replace("export_", "")
        fsm_state_data = await fsm_context.get_data()
        
        report_type_str = fsm_state_data.get("report_type")
        period_days = fsm_state_data.get("period_days")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        if report_type_str:
            report_type = ReportType(report_type_str)
            start_date = None
            end_date = None
        else:
            report_type = ReportType.CUSTOM
            end_date = datetime.now()
            start_date = end_date - timedelta(days=period_days)
        
        async with get_async_session() as session:
            analytics_service = AnalyticsService(session)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_data = await analytics_service.generate_user_report(
                callback.from_user.id,
                report_type,
                start_date,
                end_date
            )
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            report_bytes = await analytics_service.export_report(
                callback.from_user.id,
                report_type,
                export_format,
                start_date,
                end_date
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"report_{report_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{export_format}"
        
        if export_format == "json":
            await callback.message.answer_document(
                document=report_bytes,
                filename=filename,
                caption=f"üìä –û—Ç—á–µ—Ç: {report_data.title}\nüìÖ –ü–µ—Ä–∏–æ–¥: {report_data.period}"
            )
        elif export_format == "csv":
            await callback.message.answer_document(
                document=report_bytes,
                filename=filename,
                caption=f"üìä –û—Ç—á–µ—Ç: {report_data.title}\nüìÖ –ü–µ—Ä–∏–æ–¥: {report_data.period}"
            )
        else:
            await callback.message.answer(
                f"üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n\n"
                f"üìã {report_data.title}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {report_data.period}\n"
                f"üìà –ú–µ—Ç—Ä–∏–∫: {len(report_data.metrics)}\n"
                f"üìä –ì—Ä–∞—Ñ–∏–∫–æ–≤: {len(report_data.charts)}\n\n"
                f"üìù –°–≤–æ–¥–∫–∞:\n{report_data.summary}\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + "\n".join([f"‚Ä¢ {rec}" for rec in report_data.recommendations])
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await fsm_context.clear()
        await callback.message.edit_text(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_report: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_back")
async def analytics_back(callback: CallbackQuery, fsm_context: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        await callback.answer()
        await fsm_context.clear()
        
        await callback.message.edit_text(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_back: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=get_analytics_main_keyboard()
        )


@router.callback_query(F.data == "analytics_help")
async def analytics_help(callback: CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
    try:
        await callback.answer()
        
        help_text = """
üìä <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</b>

<b>–î–∞—à–±–æ—Ä–¥:</b>
‚Ä¢ –û–±–∑–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º

<b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∞—è –∏ —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏

<b>–ö–ª–∏–µ–Ω—Ç—ã:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

<b>–û—Ç—á–µ—Ç—ã:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        
        await callback.message.edit_text(
            help_text,
            reply_markup=get_analytics_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_help: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏",
            reply_markup=get_analytics_main_keyboard()
        ) 