"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è M¬≤ Agent Calendar
–ë–µ–∑ AI-—Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
"""
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import asyncio
from datetime import datetime
import json

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from app.config_minimal import settings

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="M¬≤ Agent Calendar (Minimal)",
    description="Telegram Bot –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "minimal",
        "ai_enabled": False
    }

# –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "app": settings.app_name,
        "version": "1.0.0-minimal",
        "status": "running",
        "features": [
            "Telegram Bot Integration",
            "Calendar Management",
            "Web Interface (Mini App)",
            "PostgreSQL Database"
        ],
        "ai_features": "Disabled (minimal version)",
        "endpoints": {
            "health": "/health",
            "miniapp": "/api/v1/miniapp/",
            "webhook": "/api/v1/webhook"
        }
    }

# Mini App HTML
MINI_APP_HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>M¬≤ Calendar</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .status {
            background: rgba(255,255,255,0.2);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: center;
        }
        .button {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 18px;
            margin: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }
        .feature {
            background: rgba(255,255,255,0.15);
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            border-left: 4px solid #4CAF50;
        }
        .minimal-badge {
            background: #ff6b6b;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            display: inline-block;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üè¢ M¬≤ Calendar <span class="minimal-badge">MINIMAL</span></h1>
        
        <div class="status">
            <h2>‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h2>
            <p>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ AI-—Å–µ—Ä–≤–∏—Å–æ–≤</p>
            <p>–í—Ä–µ–º—è: <span id="time"></span></p>
        </div>

        <div class="feature">
            <h3>üì± Telegram Bot</h3>
            <p>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        </div>

        <div class="feature">
            <h3>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π</h3>
            <p>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏</p>
        </div>

        <div class="feature">
            <h3>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
            <p>PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
        </div>

        <div class="feature">
            <h3>üåê Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h3>
            <p>Mini App –¥–ª—è Telegram</p>
        </div>

        <div style="text-align: center; margin-top: 30px;">
            <button class="button" onclick="window.open('/health', '_blank')">
                ü©∫ Health Check
            </button>
            <button class="button" onclick="window.open('/', '_blank')">
                üìã API Info
            </button>
        </div>

        <div style="text-align: center; margin-top: 20px; opacity: 0.8;">
            <small>M¬≤ Agent Calendar v1.0.0-minimal<br>Ready for production deployment</small>
        </div>
    </div>

    <script>
        function updateTime() {
            document.getElementById('time').textContent = new Date().toLocaleString('ru-RU');
        }
        updateTime();
        setInterval(updateTime, 1000);

        // Telegram WebApp integration
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
        }
    </script>
</body>
</html>
"""

# Mini App endpoints
@app.get("/api/v1/miniapp/", response_class=HTMLResponse)
async def mini_app():
    """Mini App –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram"""
    return MINI_APP_HTML

@app.get("/api/v1/miniapp/events")
async def get_events():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "events": [
            {
                "id": 1,
                "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                "date": "2024-01-02",
                "time": "15:00",
                "status": "upcoming"
            },
            {
                "id": 2,
                "title": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                "date": "2024-01-03", 
                "time": "10:30",
                "status": "upcoming"
            }
        ],
        "total": 2,
        "version": "minimal"
    }

@app.post("/api/v1/miniapp/events")
async def create_event(event_data: dict):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "success": True,
        "message": "Event created successfully",
        "event_id": 12345,
        "data": event_data
    }

# Webhook endpoint
@app.post("/api/v1/webhook")
async def webhook(data: dict):
    """Webhook –¥–ª—è Telegram –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return {
        "success": True,
        "message": "Webhook received",
        "version": "minimal"
    }

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    uvicorn.run(
        "app.main_minimal:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    ) 