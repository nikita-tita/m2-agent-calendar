from datetime import datetime
from typing import Optional, Dict, Any
from app.models.user import User
from app.ai.nlp.real_estate_parser import PropertyInfo


def format_welcome_message(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.display_name}!"
    
    if user.username:
        welcome_text = f"""
{greeting}

ü§ñ <b>RealEstate Calendar Bot</b> - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b> - –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –ø–æ–∫–∞–∑ —Ç—Ä–µ—à–∫–∏ –∑–∞–≤—Ç—Ä–∞ –≤ –¥–≤–∞"
üìù <b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã</b> - –ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
üì± <b>–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</b> - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ WhatsApp –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
üß† <b>AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b> - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç: "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 15:00"
‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/calendar - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É! üöÄ
        """
    else:
        welcome_text = f"""
{greeting}

ü§ñ <b>RealEstate Calendar Bot</b> - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</b>
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.

<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã  
üì± –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
üß† AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É! üöÄ
        """
    
    return welcome_text.strip()


def format_event_info(event_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    title = event_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    event_type = event_data.get("event_type", "other")
    start_time = event_data.get("start_time")
    location = event_data.get("location")
    description = event_data.get("description")
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    type_emojis = {
        "showing": "üè†",
        "meeting": "üë•", 
        "deal": "üí∞",
        "task": "üìã",
        "call": "üìû",
        "other": "üìÖ"
    }
    
    emoji = type_emojis.get(event_type, "üìÖ")
    
    text = f"""
{emoji} <b>–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ:</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
<b>–¢–∏–ø:</b> {event_type.title()}
"""
    
    if start_time:
        if isinstance(start_time, str):
            text += f"<b>–í—Ä–µ–º—è:</b> {start_time}\n"
        else:
            text += f"<b>–í—Ä–µ–º—è:</b> {start_time.strftime('%d.%m.%Y %H:%M')}\n"
    
    if location:
        text += f"<b>–ú–µ—Å—Ç–æ:</b> {location}\n"
    
    if description:
        text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
    
    text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏."
    
    return text.strip()


def format_calendar_day(events: list, date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–µ–Ω—å"""
    
    if not events:
        return f"üìÖ <b>{date.strftime('%d.%m.%Y')}</b>\n\n–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
    
    text = f"üìÖ <b>{date.strftime('%d.%m.%Y')}</b>\n\n"
    
    for i, event in enumerate(events, 1):
        start_time = event.start_time.strftime("%H:%M")
        end_time = event.end_time.strftime("%H:%M") if event.end_time else ""
        
        time_str = f"{start_time}"
        if end_time:
            time_str += f" - {end_time}"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        type_emojis = {
            "showing": "üè†",
            "meeting": "üë•", 
            "deal": "üí∞",
            "task": "üìã",
            "call": "üìû",
            "other": "üìÖ"
        }
        
        emoji = type_emojis.get(event.event_type.value, "üìÖ")
        
        text += f"{i}. {emoji} <b>{event.title}</b>\n"
        text += f"   üïê {time_str}\n"
        
        if event.location:
            text += f"   üìç {event.location}\n"
        
        text += "\n"
    
    return text.strip()


def format_client_info(client_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    
    name = client_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    phone = client_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
    email = client_data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω")
    budget = client_data.get("budget")
    areas = client_data.get("areas", [])
    
    text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>

<b>–ò–º—è:</b> {name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
<b>Email:</b> {email}
"""
    
    if budget:
        text += f"<b>–ë—é–¥–∂–µ—Ç:</b> {budget:,} ‚ÇΩ\n"
    
    if areas:
        areas_str = ", ".join(areas)
        text += f"<b>–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ä–∞–π–æ–Ω—ã:</b> {areas_str}\n"
    
    return text.strip()


def format_property_info(property_info: PropertyInfo) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    if not property_info:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    lines = []
    
    if property_info.property_type:
        lines.append(f"üè† **–¢–∏–ø:** {property_info.property_type}")
    
    if property_info.area:
        lines.append(f"üìê **–ü–ª–æ—â–∞–¥—å:** {property_info.area}")
    
    if property_info.rooms:
        lines.append(f"üõèÔ∏è **–ö–æ–º–Ω–∞—Ç:** {property_info.rooms}")
    
    if property_info.price:
        lines.append(f"üí∞ **–¶–µ–Ω–∞:** {property_info.price}")
    
    if property_info.floor:
        lines.append(f"üè¢ **–≠—Ç–∞–∂:** {property_info.floor}")
    
    if property_info.address:
        lines.append(f"üìç **–ê–¥—Ä–µ—Å:** {property_info.address}")
    
    if property_info.confidence:
        confidence_percent = int(property_info.confidence * 100)
        lines.append(f"üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence_percent}%")
    
    return "\n".join(lines) if lines else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞"


def format_validation_result(validation_result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    if not validation_result:
        return ""
    
    lines = []
    
    if validation_result.get("is_valid"):
        lines.append("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    else:
        lines.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    errors = validation_result.get("errors", [])
    if errors:
        lines.append("**–û—à–∏–±–∫–∏:**")
        for error in errors:
            lines.append(f"‚Ä¢ {error}")
    
    warnings = validation_result.get("warnings", [])
    if warnings:
        lines.append("**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**")
        for warning in warnings:
            lines.append(f"‚Ä¢ {warning}")
    
    return "\n".join(lines)


def format_ai_status(status: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    text = "ü§ñ <b>–°—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n\n"
    
    # Whisper
    whisper_status = status.get("whisper_client", {})
    if whisper_status.get("available"):
        text += "‚úÖ <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏:</b> –ê–∫—Ç–∏–≤–Ω–æ\n"
    else:
        text += "‚ùå <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
    
    # GPT
    gpt_status = status.get("gpt_client", {})
    if gpt_status.get("available"):
        text += "‚úÖ <b>AI –∞–Ω–∞–ª–∏–∑:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
    else:
        text += "‚ùå <b>AI –∞–Ω–∞–ª–∏–∑:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    # OCR
    ocr_status = status.get("ocr_client", {})
    if ocr_status.get("available"):
        text += "‚úÖ <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:</b> –ê–∫—Ç–∏–≤–Ω–æ\n"
    else:
        text += "‚ùå <b>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
    
    # –ü–∞—Ä—Å–µ—Ä
    parser_status = status.get("real_estate_parser", {})
    if parser_status.get("available"):
        text += "‚úÖ <b>–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
    else:
        text += "‚ùå <b>–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall = status.get("overall", {})
    available = overall.get("available_components", 0)
    total = overall.get("total_components", 4)
    
    text += f"\nüìä <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {available}/{total} —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ"
    
    if overall.get("fully_operational"):
        text += " üü¢"
    elif available >= 2:
        text += " üü°"
    else:
        text += " üî¥"
    
    return text.strip()


def format_property_info_legacy(property_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (legacy)"""
    
    title = property_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    address = property_data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    price = property_data.get("price")
    area = property_data.get("area")
    rooms = property_data.get("rooms")
    property_type = property_data.get("type", "other")
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    type_emojis = {
        "apartment": "üè¢",
        "house": "üè†",
        "commercial": "üè¢",
        "land": "üåç",
        "garage": "üöó",
        "other": "üè†"
    }
    
    emoji = type_emojis.get(property_type, "üè†")
    
    text = f"""
{emoji} <b>–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
<b>–ê–¥—Ä–µ—Å:</b> {address}
"""
    
    if price:
        text += f"<b>–¶–µ–Ω–∞:</b> {price:,} ‚ÇΩ\n"
    
    if area:
        text += f"<b>–ü–ª–æ—â–∞–¥—å:</b> {area} –∫–≤.–º\n"
    
    if rooms:
        text += f"<b>–ö–æ–º–Ω–∞—Ç—ã:</b> {rooms}\n"
    
    return text.strip()


def format_error_message(error: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error}"


def format_success_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    return f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {message}"


def format_event_confirmation(event) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑ ASCII-–±–ª–æ–∫–æ–≤"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    type_emojis = {
        "showing": "üè†",
        "meeting": "üë•", 
        "deal": "üí∞",
        "task": "üìã",
        "call": "üìû",
        "other": "üìÖ"
    }
    
    event_type = getattr(event, 'event_type', 'other')
    emoji = type_emojis.get(event_type, "üìÖ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    start_time = event.start_time.strftime('%d.%m.%Y –≤ %H:%M')
    
    text = f"""‚úÖ –°–û–ë–´–¢–ò–ï –°–û–ó–î–ê–ù–û

{emoji} –ó–∞–≥–æ–ª–æ–≤–æ–∫: {event.title}
üìÖ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type.title() if event_type else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üïê –í—Ä–µ–º—è: {start_time}
üë§ –ö–ª–∏–µ–Ω—Ç: {'–Ω–µ —É–∫–∞–∑–∞–Ω' if not hasattr(event, 'client') or not event.client else event.client}
üìç –ú–µ—Å—Ç–æ: {event.location if event.location else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ"""
    
    return text.strip()


def format_event_list(events, title: str = "–°–æ–±—ã—Ç–∏—è") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"""
    if not events:
        return f"üìÖ {title}\n\n–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
    
    text = f"üìÖ {title}\n\n"
    
    for i, event in enumerate(events, 1):
        start_time = event.start_time.strftime("%H:%M")
        emoji = "üìÖ"
        if hasattr(event, 'event_type'):
            type_emojis = {
                "showing": "üè†",
                "meeting": "üë•", 
                "deal": "üí∞",
                "task": "üìã",
                "call": "üìû",
                "other": "üìÖ"
            }
            emoji = type_emojis.get(event.event_type, "üìÖ")
        
        text += f"{i}. {emoji} {event.title}\n"
        text += f"   üïê {start_time}\n"
        
        if event.location:
            text += f"   üìç {event.location}\n"
        
        text += "\n"
    
    return text.strip()


def format_ai_voice_response(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if "error" in result:
        return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
    
    response_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ ASCII-–±–ª–æ–∫–æ–≤
    response_parts.append("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    # –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    transcribed_text = result.get("transcribed_text", "")
    if transcribed_text:
        response_parts.append(
            f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"{transcribed_text}"
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    property_info = result.get("property_info")
    if property_info and hasattr(property_info, 'property_type') and property_info.property_type:
        response_parts.append(
            "üè† –ù–∞–π–¥–µ–Ω–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:\n"
            f"{_format_property_info_html(property_info)}"
        )
    
    # GPT –∞–Ω–∞–ª–∏–∑
    gpt_enhanced_info = result.get("gpt_enhanced_info")
    if gpt_enhanced_info and "error" not in gpt_enhanced_info:
        response_parts.append(
            "ü§ñ AI-–∞–Ω–∞–ª–∏–∑:\n"
            f"{_format_gpt_info_html(gpt_enhanced_info)}"
        )
    
    if len(response_parts) == 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        response_parts.append(
            "üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞"
        )
    
    return "\n\n".join(response_parts)


def format_ai_image_response(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if "error" in result:
        return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
    
    response_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ ASCII-–±–ª–æ–∫–æ–≤
    response_parts.append("üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    
    # OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ocr_result = result.get("ocr_result", {})
    extracted_text = result.get("extracted_text", "")
    
    if extracted_text:
        confidence = ocr_result.get("confidence", 0)
        response_parts.append(
            f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"{extracted_text[:500]}{'...' if len(extracted_text) > 500 else ''}\n"
            f"üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {confidence:.1%}"
        )
    else:
        response_parts.append(
            "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"
            "–¢–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    property_info = result.get("property_info")
    if property_info and hasattr(property_info, 'property_type') and property_info.property_type:
        response_parts.append(
            "üè† –ù–∞–π–¥–µ–Ω–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:\n"
            f"{_format_property_info_html(property_info)}"
        )
    
    # GPT –∞–Ω–∞–ª–∏–∑
    gpt_enhanced_info = result.get("gpt_enhanced_info")
    if gpt_enhanced_info and "error" not in gpt_enhanced_info:
        response_parts.append(
            "ü§ñ AI-–∞–Ω–∞–ª–∏–∑:\n"
            f"{_format_gpt_info_html(gpt_enhanced_info)}"
        )
    
    if not property_info or not hasattr(property_info, 'property_type') or not property_info.property_type:
        if extracted_text:
            response_parts.append(
                "üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.\n\n"
                "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
            )
        else:
            response_parts.append(
                "üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                "–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.\n\n"
                "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —á–µ—Ç–∫–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞"
            )
    
    return "\n\n".join(response_parts)


def _format_property_info_html(property_info) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ HTML"""
    lines = []
    
    if hasattr(property_info, 'property_type') and property_info.property_type:
        lines.append(f"üè† <b>–¢–∏–ø:</b> {property_info.property_type}")
    
    if hasattr(property_info, 'area') and property_info.area:
        lines.append(f"üìê <b>–ü–ª–æ—â–∞–¥—å:</b> {property_info.area}")
    
    if hasattr(property_info, 'rooms') and property_info.rooms:
        lines.append(f"üõèÔ∏è <b>–ö–æ–º–Ω–∞—Ç:</b> {property_info.rooms}")
    
    if hasattr(property_info, 'price') and property_info.price:
        lines.append(f"üí∞ <b>–¶–µ–Ω–∞:</b> {property_info.price}")
    
    if hasattr(property_info, 'floor') and property_info.floor:
        lines.append(f"üè¢ <b>–≠—Ç–∞–∂:</b> {property_info.floor}")
    
    if hasattr(property_info, 'address') and property_info.address:
        lines.append(f"üìç <b>–ê–¥—Ä–µ—Å:</b> {property_info.address}")
    
    if hasattr(property_info, 'confidence') and property_info.confidence:
        confidence_percent = int(property_info.confidence * 100)
        lines.append(f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence_percent}%")
    
    return "\n".join(lines) if lines else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞"


def _format_gpt_info_html(gpt_info: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç GPT –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HTML"""
    lines = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    key_mapping = {
        "property_type": ("üè†", "–¢–∏–ø"),
        "address": ("üìç", "–ê–¥—Ä–µ—Å"),
        "area": ("üìê", "–ü–ª–æ—â–∞–¥—å"),
        "rooms": ("üõèÔ∏è", "–ö–æ–º–Ω–∞—Ç"),
        "price": ("üí∞", "–¶–µ–Ω–∞"),
        "floor": ("üè¢", "–≠—Ç–∞–∂"),
        "description": ("üìù", "–û–ø–∏—Å–∞–Ω–∏–µ"),
        "contact": ("üìû", "–ö–æ–Ω—Ç–∞–∫—Ç")
    }
    
    for key, value in gpt_info.items():
        if value and key in key_mapping and key not in ["error", "confidence"]:
            emoji, label = key_mapping[key]
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            if key == "description" and len(str(value)) > 100:
                value = str(value)[:100] + "..."
            lines.append(f"{emoji} <b>{label}:</b> {value}")
    
    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    confidence = gpt_info.get("confidence")
    if confidence:
        try:
            confidence_percent = int(float(confidence) * 100)
            lines.append(f"üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence_percent}%")
        except (ValueError, TypeError):
            pass
    
    return "\n".join(lines) if lines else "–ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" 