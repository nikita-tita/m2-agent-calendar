"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import logging
import logging.handlers
import sys
import json
import traceback
from datetime import datetime
from typing import Any, Dict, Optional
from pathlib import Path
import asyncio
from contextlib import asynccontextmanager
import time
import functools

from app.config import settings


class JSONFormatter(logging.Formatter):
    """JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    def format(self, record):
        log_entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if hasattr(record, 'user_id'):
            log_entry['user_id'] = record.user_id
        if hasattr(record, 'chat_id'):
            log_entry['chat_id'] = record.chat_id
        if hasattr(record, 'request_id'):
            log_entry['request_id'] = record.request_id
        if hasattr(record, 'duration'):
            log_entry['duration'] = record.duration
        if hasattr(record, 'extra_data'):
            log_entry['extra_data'] = record.extra_data
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if record.exc_info:
            log_entry['exception'] = {
                'type': record.exc_info[0].__name__,
                'message': str(record.exc_info[1]),
                'traceback': traceback.format_exception(*record.exc_info)
            }
        
        return json.dumps(log_entry, ensure_ascii=False)


class TelegramLogHandler(logging.Handler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram"""
    
    def __init__(self, bot, chat_id: int, level=logging.ERROR):
        super().__init__(level)
        self.bot = bot
        self.chat_id = chat_id
        self.queue = asyncio.Queue()
        self.task = None
    
    def emit(self, record):
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            asyncio.create_task(self.queue.put(record))
        except Exception:
            self.handleError(record)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        self.task = asyncio.create_task(self._process_queue())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
    
    async def _process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ª–æ–≥–æ–≤"""
        while True:
            try:
                record = await self.queue.get()
                await self._send_log(record)
                self.queue.task_done()
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"Error processing log queue: {e}")
    
    async def _send_log(self, record):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ Telegram"""
        try:
            message = self.format(record)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 4000:
                message = message[:4000] + "..."
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=f"üö® **–õ–æ–≥ –æ—à–∏–±–∫–∏**\n\n{message}",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"Failed to send log to Telegram: {e}")


class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self):
        self.metrics = {}
        self.counters = {}
        self.timers = {}
    
    def increment(self, metric_name: str, value: int = 1, tags: Optional[Dict[str, str]] = None):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        key = self._get_metric_key(metric_name, tags)
        if key not in self.counters:
            self.counters[key] = 0
        self.counters[key] += value
    
    def gauge(self, metric_name: str, value: float, tags: Optional[Dict[str, str]] = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"""
        key = self._get_metric_key(metric_name, tags)
        self.metrics[key] = value
    
    def timer(self, metric_name: str, duration: float, tags: Optional[Dict[str, str]] = None):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        key = self._get_metric_key(metric_name, tags)
        if key not in self.timers:
            self.timers[key] = []
        self.timers[key].append(duration)
    
    def _get_metric_key(self, metric_name: str, tags: Optional[Dict[str, str]] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –º–µ—Ç—Ä–∏–∫–∏"""
        if tags:
            tag_str = ",".join([f"{k}={v}" for k, v in sorted(tags.items())])
            return f"{metric_name}:{tag_str}"
        return metric_name
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
        result = {
            "counters": self.counters.copy(),
            "gauges": self.metrics.copy(),
            "timers": {}
        }
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        for key, values in self.timers.items():
            if values:
                result["timers"][key] = {
                    "count": len(values),
                    "min": min(values),
                    "max": max(values),
                    "avg": sum(values) / len(values),
                    "sum": sum(values)
                }
        
        return result
    
    def reset(self):
        """–°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫"""
        self.metrics.clear()
        self.counters.clear()
        self.timers.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
metrics = MetricsCollector()


def log_execution_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        logger = logging.getLogger(func.__module__)
        
        try:
            result = await func(*args, **kwargs)
            duration = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            logger.info(
                f"Function {func.__name__} executed successfully",
                extra={
                    'duration': duration,
                    'function': func.__name__,
                    'module': func.__module__
                }
            )
            
            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏
            metrics.timer(f"{func.__module__}.{func.__name__}.duration", duration)
            metrics.increment(f"{func.__module__}.{func.__name__}.calls")
            
            return result
        except Exception as e:
            duration = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            logger.error(
                f"Function {func.__name__} failed: {str(e)}",
                extra={
                    'duration': duration,
                    'function': func.__name__,
                    'module': func.__module__,
                    'error': str(e)
                },
                exc_info=True
            )
            
            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            metrics.increment(f"{func.__module__}.{func.__name__}.errors")
            
            raise
    
    return wrapper


class RequestLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, logger_name: str = "http"):
        self.logger = logging.getLogger(logger_name)
    
    async def log_request(self, request, response=None, duration=None, error=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        log_data = {
            'method': request.method,
            'url': str(request.url),
            'headers': dict(request.headers),
            'client_ip': request.client.host if request.client else None,
            'user_agent': request.headers.get('user-agent'),
        }
        
        if response:
            log_data.update({
                'status_code': response.status_code,
                'response_size': len(response.body) if hasattr(response, 'body') else 0
            })
        
        if duration:
            log_data['duration'] = duration
        
        if error:
            log_data['error'] = str(error)
            self.logger.error("HTTP Request failed", extra=log_data)
        else:
            self.logger.info("HTTP Request", extra=log_data)


def setup_logging(
    log_level: str = "INFO",
    log_file: Optional[str] = None,
    log_format: str = "json",
    telegram_bot = None,
    telegram_chat_id: Optional[int] = None
):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, log_level.upper()))
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    if log_format == "json":
        formatter = JSONFormatter()
    else:
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    if log_file:
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5
        )
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è Telegram
    if telegram_bot and telegram_chat_id:
        telegram_handler = TelegramLogHandler(telegram_bot, telegram_chat_id)
        telegram_handler.setFormatter(formatter)
        root_logger.addHandler(telegram_handler)
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        asyncio.create_task(telegram_handler.start())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    
    logging.info("Logging system initialized", extra={
        'log_level': log_level,
        'log_file': log_file,
        'log_format': log_format
    })


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.start_time = time.time()
        self.requests_count = 0
        self.errors_count = 0
        self.active_connections = 0
    
    def record_request(self, success: bool = True):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞"""
        self.requests_count += 1
        if not success:
            self.errors_count += 1
    
    def get_uptime(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        return time.time() - self.start_time
    
    def get_error_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—à–∏–±–æ–∫"""
        if self.requests_count == 0:
            return 0.0
        return (self.errors_count / self.requests_count) * 100
    
    def get_requests_per_second(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É"""
        uptime = self.get_uptime()
        if uptime == 0:
            return 0.0
        return self.requests_count / uptime


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_monitor = PerformanceMonitor()


@asynccontextmanager
async def log_context(
    user_id: Optional[int] = None,
    chat_id: Optional[int] = None,
    request_id: Optional[str] = None,
    extra_data: Optional[Dict[str, Any]] = None
):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    task = asyncio.current_task()
    if task:
        task.set_name(f"request_{request_id or 'unknown'}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    logger = logging.getLogger()
    logger.info("Context started", extra={
        'user_id': user_id,
        'chat_id': chat_id,
        'request_id': request_id,
        'extra_data': extra_data
    })
    
    try:
        yield
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error("Context error", extra={
            'user_id': user_id,
            'chat_id': chat_id,
            'request_id': request_id,
            'error': str(e),
            'extra_data': extra_data
        }, exc_info=True)
        raise
    finally:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        logger.info("Context finished", extra={
            'user_id': user_id,
            'chat_id': chat_id,
            'request_id': request_id,
            'extra_data': extra_data
        }) 